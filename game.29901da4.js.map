{"version":3,"sources":["input.js","snake.js","grid.js","food.js","game.js"],"names":["inputDirection","x","y","lastInputDirection","getInputDirection","window","addEventListener","e","key","SNAKE_SPEED","snakeBody","newSegments","update","addSegments","i","length","draw","gameBoard","forEach","segment","snakeElement","document","createElement","style","gridRowStart","gridColumnStart","classList","add","appendChild","expandSnake","amount","onSnake","position","ignoreHead","some","index","equalPosition","getSnakeHead","snakeIntersection","pos1","pos2","push","GRID_SIZE","randomGridPosition","Math","floor","random","outsideGrid","food","getRandomFoodPosition","EXPANSION_RATE","foodElement","newFoodPosition","lastRenderTime","gameOver","getElementById","main","currentTime","confirm","location","href","requestAnimationFrame","checkDeath","innerHTML"],"mappings":"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","file":"game.29901da4.js","sourceRoot":"../src","sourcesContent":["let inputDirection = { x:0, y:0 };\nlet lastInputDirection = { x:0, y:0 };\n\nwindow.addEventListener('keydown', e => {\n  switch (e.key) {\n    case 'ArrowUp':\n      if (lastInputDirection.y !== 0) break;\n      inputDirection = {x: 0, y: -1};\n      break;\n    case 'ArrowDown':\n      if (lastInputDirection.y !== 0) break;\n      inputDirection = {x: 0, y: 1};\n      break;\n    case 'ArrowLeft':\n      if (lastInputDirection.x !== 0) break;\n      inputDirection = {x: -1, y: 0};\n      break;\n    case 'ArrowRight':\n      if (lastInputDirection.x !== 0) break;\n      inputDirection = {x: 1, y: 0};\n      break;\n  }\n});\n\nexport function getInputDirection () {\n  lastInputDirection = inputDirection;\n  return inputDirection;\n}\n","import { getInputDirection } from \"./input.js\";\n\nexport const SNAKE_SPEED = 5;\nconst snakeBody = [{x: 11, y: 11}];\nlet newSegments = 0;\n\nexport function update() {\n  addSegments();\n  const inputDirection = getInputDirection();\n  for (let i = snakeBody.length - 2; i >= 0; i--) {\n    snakeBody[i + 1] = { ...snakeBody[i] };\n  }\n\n  snakeBody[0].x += inputDirection.x;\n  snakeBody[0].y += inputDirection.y;\n}\n\nexport function draw(gameBoard) {\n  snakeBody.forEach(segment => {\n    const snakeElement = document.createElement('div');\n    snakeElement.style.gridRowStart = segment.y;\n    snakeElement.style.gridColumnStart = segment.x;\n    snakeElement.classList.add('snake');\n    gameBoard.appendChild(snakeElement);\n  });\n}\n\nexport function expandSnake(amount) {\n  newSegments += amount;\n}\n\nexport function onSnake(position, { ignoreHead = false } = {}) {\n  return snakeBody.some((segment, index )=> {\n    if (ignoreHead && index === 0) return false;\n    return equalPosition(segment, position);\n  });\n}\n\nexport function getSnakeHead() {\n  return snakeBody[0];\n}\n\nexport function snakeIntersection() {\n  return onSnake(snakeBody[0], { ignoreHead: true })\n}\n\nfunction equalPosition(pos1, pos2) {\n  return pos1.x === pos2.x && pos1.y === pos2.y\n}\n\nfunction  addSegments() {\n  for (let i = 0; i < newSegments; i++) {\n    snakeBody.push({ ...snakeBody[snakeBody.length - 1] });\n  }\n\n  newSegments = 0;\n}\n","const GRID_SIZE = 21;\n\nexport function randomGridPosition() {\n  return {\n    x: Math.floor(Math.random() * GRID_SIZE) + 1,\n    y: Math.floor(Math.random() * GRID_SIZE) + 1,\n  }\n}\n\nexport function outsideGrid(position) {\n  return (\n    position.x < 1 || position.x > GRID_SIZE\n    || position.y < 1 || position.y > GRID_SIZE\n  )\n}\n","import { onSnake, expandSnake } from \"./snake.js\";\nimport { randomGridPosition } from \"./grid.js\";\n\nlet food = getRandomFoodPosition();\nconst EXPANSION_RATE = 1;\n\nexport function update() {\n  if (onSnake(food)) {\n    expandSnake(EXPANSION_RATE)\n    food = getRandomFoodPosition();\n  }\n}\n\nexport function draw(gameBoard) {\n    const foodElement = document.createElement('div');\n    foodElement.style.gridRowStart = food.y;\n    foodElement.style.gridColumnStart = food.x;\n    foodElement.classList.add('food');\n    gameBoard.appendChild(foodElement);\n}\n\nfunction getRandomFoodPosition() {\n  let newFoodPosition;\n\n  while (newFoodPosition == null || onSnake(newFoodPosition)) {\n    newFoodPosition = randomGridPosition();\n  }\n\n  return newFoodPosition\n}\n","import {\n  update as updateSnake,\n  draw as drawSnake,\n  SNAKE_SPEED,\n  snakeIntersection,\n  getSnakeHead,\n} from \"./snake.js\";\nimport {\n  update as updateFoo,\n  draw as drawFood\n} from \"./food.js\";\nimport { outsideGrid } from \"./grid.js\";\n\nlet lastRenderTime = 0;\nlet gameOver = false;\nconst gameBoard = document.getElementById('game-board');\n\n\nfunction main(currentTime) {\n  if (gameOver) {\n    if (confirm('GAME OVER')) {\n      window.location.href = window.location.href;\n    }\n    return;\n  }\n\n  window.requestAnimationFrame(main)\n  const secondSinceLastRender = (currentTime - lastRenderTime) / 1000;\n  if (secondSinceLastRender < 1 / SNAKE_SPEED) return;\n\n  lastRenderTime = currentTime;\n\n  update();\n  draw();\n}\n\nwindow.requestAnimationFrame(main);\n\n\nfunction update() {\n  updateSnake();\n  updateFoo()\n  checkDeath();\n}\n\nfunction draw() {\n  gameBoard.innerHTML = ''\n  drawSnake(gameBoard);\n  drawFood(gameBoard)\n}\n\nfunction checkDeath() {\n  gameOver = outsideGrid(getSnakeHead())\n    || snakeIntersection();\n}\n"]}